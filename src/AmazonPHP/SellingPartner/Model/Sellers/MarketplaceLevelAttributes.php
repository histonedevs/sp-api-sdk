<?php

declare(strict_types=1);

namespace AmazonPHP\SellingPartner\Model\Sellers;

use AmazonPHP\SellingPartner\Exception\AssertionException;
use AmazonPHP\SellingPartner\ModelInterface;
use AmazonPHP\SellingPartner\ObjectSerializer;

/**
 * Selling Partner API for Sellers.
 *
 * The [Selling Partner API for Sellers](https://developer-docs.amazon.com/sp-api/docs/sellers-api-v1-reference) (Sellers API) provides essential information about seller accounts, such as:  - The marketplaces a seller can list in - The default language and currency of a marketplace - Whether the seller has suspended listings  Refer to the [Sellers API reference](https://developer-docs.amazon.com/sp-api/docs/sellers-api-v1-reference) for details about this API's operations, data types, and schemas.
 *
 * The version of the OpenAPI document: v1
 *
 * This class was auto-generated by https://openapi-generator.tech
 * Do not change it, it will be overwritten with next execution of /bin/generate.sh
 *
 * @implements \ArrayAccess<TKey, TValue>
 *
 * @template TKey int|null
 * @template TValue mixed|null
 */
class MarketplaceLevelAttributes implements \ArrayAccess, \JsonSerializable, \Stringable, ModelInterface
{
    final public const DISCRIMINATOR = null;

    final public const LISTING_STATUS_ACTIVE = 'ACTIVE';

    final public const LISTING_STATUS_INACTIVE = 'INACTIVE';

    final public const SELLING_PLAN_PROFESSIONAL = 'PROFESSIONAL';

    final public const SELLING_PLAN_INDIVIDUAL = 'INDIVIDUAL';

    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'MarketplaceLevelAttributes';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static array $openAPITypes = [
        'marketplace' => '\AmazonPHP\SellingPartner\Model\Sellers\Marketplace',
        'store_name' => 'string',
        'listing_status' => 'string',
        'selling_plan' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static array $openAPIFormats = [
        'marketplace' => null,
        'store_name' => null,
        'listing_status' => null,
        'selling_plan' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'marketplace' => 'marketplace',
        'store_name' => 'storeName',
        'listing_status' => 'listingStatus',
        'selling_plan' => 'sellingPlan',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static array $setters = [
        'marketplace' => 'setMarketplace',
        'store_name' => 'setStoreName',
        'listing_status' => 'setListingStatus',
        'selling_plan' => 'setSellingPlan',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static array $getters = [
        'marketplace' => 'getMarketplace',
        'store_name' => 'getStoreName',
        'listing_status' => 'getListingStatus',
        'selling_plan' => 'getSellingPlan',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param null|mixed[] $data Associated array of property values
     *                           initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['marketplace'] = $data['marketplace'] ?? null;
        $this->container['store_name'] = $data['store_name'] ?? null;
        $this->container['listing_status'] = $data['listing_status'] ?? null;
        $this->container['selling_plan'] = $data['selling_plan'] ?? null;
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     */
    public static function openAPITypes() : array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     */
    public static function openAPIFormats() : array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     */
    public static function attributeMap() : array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     */
    public static function setters() : array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     */
    public static function getters() : array
    {
        return self::$getters;
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString() : string
    {
        return (string) \json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * The original name of the model.
     */
    public function getModelName() : string
    {
        return self::$openAPIModelName;
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getListingStatusAllowableValues() : array
    {
        return [
            self::LISTING_STATUS_ACTIVE,
            self::LISTING_STATUS_INACTIVE,
        ];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getSellingPlanAllowableValues() : array
    {
        return [
            self::SELLING_PLAN_PROFESSIONAL,
            self::SELLING_PLAN_INDIVIDUAL,
        ];
    }

    /**
     * Validate all properties.
     *
     * @throws AssertionException
     */
    public function validate() : void
    {
        if ($this->container['marketplace'] === null) {
            throw new AssertionException("'marketplace' can't be null");
        }

        $this->container['marketplace']->validate();

        if ($this->container['store_name'] === null) {
            throw new AssertionException("'store_name' can't be null");
        }

        if ($this->container['listing_status'] === null) {
            throw new AssertionException("'listing_status' can't be null");
        }

        $allowedValues = $this->getListingStatusAllowableValues();

        if (null !== $this->container['listing_status'] && !\in_array($this->container['listing_status'], $allowedValues, true)) {
            throw new AssertionException(
                \sprintf(
                    "invalid value '%s' for 'listing_status', must be one of '%s'",
                    $this->container['listing_status'],
                    \implode("', '", $allowedValues)
                )
            );
        }

        if ($this->container['selling_plan'] === null) {
            throw new AssertionException("'selling_plan' can't be null");
        }

        $allowedValues = $this->getSellingPlanAllowableValues();

        if (null !== $this->container['selling_plan'] && !\in_array($this->container['selling_plan'], $allowedValues, true)) {
            throw new AssertionException(
                \sprintf(
                    "invalid value '%s' for 'selling_plan', must be one of '%s'",
                    $this->container['selling_plan'],
                    \implode("', '", $allowedValues)
                )
            );
        }
    }

    /**
     * Gets marketplace.
     */
    public function getMarketplace() : Marketplace
    {
        return $this->container['marketplace'];
    }

    /**
     * Sets marketplace.
     *
     * @param \AmazonPHP\SellingPartner\Model\Sellers\Marketplace $marketplace marketplace
     */
    public function setMarketplace(Marketplace $marketplace) : self
    {
        $this->container['marketplace'] = $marketplace;

        return $this;
    }

    /**
     * Gets store_name.
     */
    public function getStoreName() : string
    {
        return $this->container['store_name'];
    }

    /**
     * Sets store_name.
     *
     * @param string $store_name the name of the seller's store as displayed in the marketplace
     */
    public function setStoreName(string $store_name) : self
    {
        $this->container['store_name'] = $store_name;

        return $this;
    }

    /**
     * Gets listing_status.
     */
    public function getListingStatus() : string
    {
        return $this->container['listing_status'];
    }

    /**
     * Sets listing_status.
     *
     * @param string $listing_status the current status of the seller's listings
     */
    public function setListingStatus(string $listing_status) : self
    {
        $this->container['listing_status'] = $listing_status;

        return $this;
    }

    /**
     * Gets selling_plan.
     */
    public function getSellingPlan() : string
    {
        return $this->container['selling_plan'];
    }

    /**
     * Sets selling_plan.
     *
     * @param string $selling_plan the selling plan details
     */
    public function setSellingPlan(string $selling_plan) : self
    {
        $this->container['selling_plan'] = $selling_plan;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     */
    public function offsetExists($offset) : bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset) : mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     */
    public function offsetSet($offset, $value) : void
    {
        if (null === $offset) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     */
    public function offsetUnset($offset) : void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize() : string
    {
        return \json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue() : string
    {
        return \json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR);
    }
}
